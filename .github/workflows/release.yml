name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v5
    
    - name: Create Release
      id: create_release
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        
        # Check if release already exists
        if gh release view "$TAG_NAME" >/dev/null 2>&1; then
          echo "Release $TAG_NAME already exists, skipping creation"
          echo "release_url=$(gh release view "$TAG_NAME" --json url --jq .url)" >> $GITHUB_OUTPUT
        else
          echo "Creating new release $TAG_NAME"
          gh release create "$TAG_NAME" \
            --title "Release $TAG_NAME" \
            --generate-notes \
            --latest
          echo "release_url=$(gh release view "$TAG_NAME" --json url --jq .url)" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('Cargo.lock', 'tnuctipun-derive/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-release-
          ${{ runner.os }}-cargo-
    
    - name: Extract tag version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Verify version consistency
      run: |
        TAG_VERSION="${{ steps.get_version.outputs.VERSION }}"
        MAIN_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        DERIVE_VERSION=$(grep '^version = ' tnuctipun-derive/Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        
        echo "Tag version: $TAG_VERSION"
        echo "Main crate version: $MAIN_VERSION"
        echo "Derive crate version: $DERIVE_VERSION"
        
        if [ "$TAG_VERSION" != "$MAIN_VERSION" ]; then
          echo "Error: Tag version ($TAG_VERSION) does not match main crate version ($MAIN_VERSION)"
          exit 1
        fi
        
        if [ "$TAG_VERSION" != "$DERIVE_VERSION" ]; then
          echo "Error: Tag version ($TAG_VERSION) does not match derive crate version ($DERIVE_VERSION)"
          exit 1
        fi
        
        echo "✅ All versions are consistent"
    
    - name: Run tests before publishing
      run: cargo test --all-features --workspace
    
    - name: Login to crates.io
      run: cargo login ${{ secrets.CRATES_IO_TOKEN }}
    
    - name: Publish tnuctipun-derive
      run: |
        echo "Publishing tnuctipun-derive v${{ steps.get_version.outputs.VERSION }}"
        cargo publish -p tnuctipun-derive --dry-run
        cargo publish -p tnuctipun-derive
    
    - name: Wait for tnuctipun-derive to be available
      run: |
        echo "Waiting for tnuctipun-derive to be available on crates.io..."
        sleep 60
        
        # Verify the package is available
        for i in {1..10}; do
          if cargo search tnuctipun-derive | grep -q "tnuctipun-derive.*${{ steps.get_version.outputs.VERSION }}"; then
            echo "✅ tnuctipun-derive v${{ steps.get_version.outputs.VERSION }} is now available"
            break
          fi
          echo "Attempt $i: Package not yet available, waiting..."
          sleep 30
        done
    
    - name: Publish tnuctipun
      run: |
        echo "Publishing tnuctipun v${{ steps.get_version.outputs.VERSION }}"
        cargo publish -p tnuctipun --dry-run
        cargo publish -p tnuctipun
